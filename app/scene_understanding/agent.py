from google.adk.agents import Agent
from google.adk.tools import load_artifacts
from google.adk.tools.tool_context import ToolContext
from google.genai import Client
from google.genai import types
import google

import os
# from zoneinfo import ZoneInfo

import google.auth
# from google.adk.agents import Agent

_, project_id = google.auth.default()
os.environ.setdefault("GOOGLE_CLOUD_PROJECT", project_id)
os.environ.setdefault("GOOGLE_CLOUD_LOCATION", "global")
os.environ.setdefault("GOOGLE_GENAI_USE_VERTEXAI", "True")



async def generate_image(prompt: str, tool_context: 'ToolContext'):
  """Generates an image based on the prompt."""
  contents = [prompt]
  try:
      # This logic loads the most recently created artifact as context for image editing.
      # If no artifact exists, it proceeds with just the prompt for image generation.
      available_files = await tool_context.list_artifacts()
      if available_files:
          latest_artifact_name = available_files[-1]
          print(f"Loading artifact '{latest_artifact_name}' as context for image generation.")
          image = await tool_context.load_artifact(latest_artifact_name)
          if image:
              contents.append(image)
  except Exception as e:
      # Log the error but don't stop; we can still try to generate from the prompt.
      print(f"Warning: Could not load artifact for image editing: {e}")

  response = client.models.generate_content(
      # Using a more recent and powerful model for image generation
      model='gemini-1.5-flash-latest',
      contents=contents,
  )
  # It's good practice to check if the response has candidates before accessing them.
  if not response.candidates:
      return {'status': 'failed', 'detail': 'No content generated by the model.'}
  for part in response.candidates[0].content.parts:
      if part.text is not None:
          print(part.text)
      elif part.inline_data is not None:
          image_bytes = part.inline_data.data
          await tool_context.save_artifact(
              'image.png',
              types.Part.from_bytes(data=image_bytes, mime_type='image/png'),
          )
          return {
              'status': 'success',
              'detail': 'Image generated successfully and stored in artifacts.',
              'filename': 'image.png',
          }
  return {'status': 'failed'}

image_generation_agent = Agent(
    model='gemini-1.5-flash-latest',
    name='scene_agent',
    description="""A specialist agent that generates or edits images based on a text prompt. It can also answer questions about an image.""",
    instruction="""You are an agent whose job is to generate or edit an image based on the user's prompt.
""",
    tools=[generate_image, load_artifacts],
)